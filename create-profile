#!/bin/bash

set -o pipefail

# TODO - Remove once we introduce the logging package --------------------------

bold='\033[1m'
reset='\033[0m'
blue='\033[1;34m'
red='\033[0;31m'
yellow='\033[1;33m'

info_level_weight=40
warn_level_weight=30
error_level_weight=20
debug_level_weight=10

initialise_logging () {
  #Â Read valid log level from environment or fallback to default level
  log_weight_name=$(echo "${LOGLEVEL:-INFO}_level_weight" | tr '[:upper:]' '[:lower:]')

  # Expand log level weight via indirection
  log_weight=${!log_weight_name}

  # Ensure log level was expanded to a valid weight or exit with error
  if [[ -z ${log_weight} ]]; then
      printf "${red}Error:${reset} Invalid log level '${LOGLEVEL}' set in environment, exiting..\n" >&2
      exit 1
  fi
}

log () {
  local verbosity=$1
  local colour=$2
  local title=$3
  local message=$4

  if [[ ${verbosity} -eq ${error_level_weight} ]]; then
      printf "${colour}${title}${reset}: ${message}\n" >&2
  elif [[ ${verbosity} -ge ${log_weight} ]]; then
      printf "${colour}${title}${reset}: ${message}\n" >&1
  fi
}

info () {
    log ${info_level_weight} ${blue} "Info" "$1"
}

warn () {
    log ${warn_level_weight} ${yellow} "Warning" "$1"
}

error () {
    log ${error_level_weight} ${red} "Error" "$1"
}

debug () {
    log ${debug_level_weight} ${yellow} "Debug" "$1"
}

# ------------------------------------------------------------------------------

aws_cli_directory="${HOME}/.aws"
config_file_path="${aws_cli_directory}/config"
credential_file_path="${aws_cli_directory}/credentials"

create_config_file () {
    local profile_name="${1}"
    local region="${2}"

    info "Creating config file [${config_file_path}]"

    cat > "${config_file_path}" <<EOF
[profile ${profile_name}]
output = json
region = ${region}
EOF
}

create_credential_file () {
    local profile_name="${1}"
    local access_key_id="${2}"
    local secret_access_key="${3}"

    info "Creating credential file [${credential_file_path}]"

    cat > "${credential_file_path}" <<EOF
[${profile_name}]
aws_access_key_id = ${access_key_id}
aws_secret_access_key = ${secret_access_key}
EOF
}

validate_configuration () {
    info "Validating profile configuration"

    verify_set "${AWS_PROFILE}" "Required 'AWS_PROFILE' variable has not been set"
    verify_set "${AWS_REGION}" "Required 'AWS_REGION' variable has not been set"
    verify_set "${AWS_ACCESS_KEY_ID}" "Required 'AWS_ACCESS_KEY_ID' option has not been set"
    verify_set "${AWS_SECRET_ACCESS_KEY}" "Required 'AWS_SECRET_ACCESS_KEY' option has not been set"
}

verify_set () {
    local arg_value="${1}"
    local message="${2}"
    if [[ -z "${arg_value}" ]]; then
        error "${message}"
        exit 1
    fi
}

validate_configuration

mkdir -p "${aws_cli_directory}"
create_config_file "${AWS_PROFILE}" "${AWS_REGION}"
create_credential_file "${AWS_PROFILE}" "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_KEY}"
